
#include <fmt/core.h>

#include "udb/cfgs/<%= cfg_arch.name %>/hart.hxx"

using namespace udb;

<%- cfg_arch.globals.each do |global| -%>
<%- next if global.type(cfg_arch.symtab).const? -%>
<%= global.type(cfg_arch.symtab).to_cxx %> <%= name_of(:hart, cfg_arch) %>::<%= global.id %>;
<%- end -%>


void udb::<%= name_of(:hart, cfg_arch) %>::printState(FILE* out) const {
  fmt::print(out, "Hart %u:\n", m_hart_id);
  if constexpr (sizeof(XReg) == 8) {
    fmt::print(out, "PC: {:#18x}\n", m_pc);
    for (int i=0; i<16; i++) {
      fmt::print(out, "x{:2}: {:#18x}\tx{:2}: {:#18x}\n", i, m_xregs[i], i + 16, m_xregs[16 + 1]);
    }
  } else if constexpr (sizeof(XReg) == 4) {
    fmt::print(out, "PC: {:#10x}\n", m_pc);
    for (int i=0; i<16; i++) {
      fmt::print(out, "x{:2}: {:#10x}\tx{:2}: {:#10x}\n", i, m_xregs[i], i + 16, m_xregs[16 + 1]);
    }
  } else {
    udb_assert(false, "unsupported xlen");
  }
}

void udb::<%= name_of(:hart, cfg_arch) %>::init_csr_map()
{
  <%- cfg_arch.not_prohibited_csrs.each do |csr| -%>
  <%- unless csr.address.nil? -%>
  m_csr_addr_map[<%= csr.address %>] = &m_csrs.<%= csr.name %>;
  <%- end -%>
  m_csr_name_map["<%= csr.name %>"] = &m_csrs.<%= csr.name %>;
  <%- end -%>
}
