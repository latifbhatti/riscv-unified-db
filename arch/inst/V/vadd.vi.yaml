# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: vadd.vi
long_name: No synopsis available.
description: |
  No description available.
definedBy: V
assembly: vm, vs2, vd, imm
encoding:
  match: 000000-----------011-----1010111
  variables:
    - name: vm
      location: 25-25
    - name: vs2
      location: 24-20
    - name: simm5
      location: 19-15
    - name: vd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: true
operation(): |
  U32 SEW = 32;                                    #from vtype vcsr
  U32 vstart = 0;                                  # from vcsr
  U32 M1 = 1;                                      #from vtype vcsr
  U32 VLEN = 128 ;                                 #fron config file
  U32 ELEN = 32;                                   #from config file
  U32 vec_result = 0;
  U32 lmul_increment = 0;                        # After implementing the 2D parser, remove the lmul_increment variable.


    # for (U32 lmul_increment = 0; lmul_increment < M1; lmul_increment++) {          # define value of LMUL from CSR (for grouping) (Uncomment after adding the 2D parser in IDL)
      for (U32 j = 0; j < ((M1 * VLEN )/ ELEN); j++) { # To find total elements according to ELEN
        U32 sew_increment = SEW;                        # from vcsr(sew)
        for (U32 k = 0; k < ELEN/SEW; k++) {       # for sew selection
          vec_result[sew_increment-1:sew_increment-SEW] = # for grouping [vd+lmul_increment][sew_increment-1:sew_increment-SEW] (Uncomment after adding the 2D parser in IDL)
          perform_vector_operation(
            X[vs2+lmul_increment][sew_increment-1:sew_increment-SEW] + simm5,
            X[vd][sew_increment-1:sew_increment-SEW],                                                                            #vs3 for previous data()
            $bits(X[0][vstart%ELEN]),                                                                                             #masking bit from vs0
            $encoding
          );
          vstart = vstart + 1;
          sew_increment = sew_increment + SEW;
        }
        X[vd + lmul_increment] = vec_result;

      }
    # }

sail(): |
  {
    let SEW      = get_sew();
    let LMUL_pow = get_lmul_pow();
    let num_elem = get_num_elem(LMUL_pow, SEW);

    if illegal_normal(vd, vm) then { handle_illegal(); return RETIRE_FAIL };

    let 'n = num_elem;
    let 'm = SEW;

    let vm_val  : vector('n, dec, bool)     = read_vmask(num_elem, vm, 0b00000);
    let imm_val : bits('m)                  = sign_extend(simm);
    let vs2_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs2);
    let vd_val  : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vd);
    result      : vector('n, dec, bits('m)) = undefined;
    mask        : vector('n, dec, bool)     = undefined;

    (result, mask) = init_masked_result(num_elem, SEW, LMUL_pow, vd_val, vm_val);

    foreach (i from 0 to (num_elem - 1)) {
      if mask[i] then {
        result[i] = match funct6 {
          VI_VADD    => vs2_val[i] + imm_val,
          VI_VRSUB   => imm_val - vs2_val[i],
          VI_VAND    => vs2_val[i] & imm_val,
          VI_VOR     => vs2_val[i] | imm_val,
          VI_VXOR    => vs2_val[i] ^ imm_val,
          VI_VSADDU  => unsigned_saturation('m, zero_extend('m + 1, vs2_val[i]) + zero_extend('m + 1, imm_val) ),
          VI_VSADD   => signed_saturation('m, sign_extend('m + 1, vs2_val[i]) + sign_extend('m + 1, imm_val) ),
          VI_VSLL    => {
                          let shift_amount = get_shift_amount(zero_extend('m, simm), SEW);
                          vs2_val[i] << shift_amount
                        },
          VI_VSRL    => {
                          let shift_amount = get_shift_amount(zero_extend('m, simm), SEW);
                          vs2_val[i] >> shift_amount
                        },
          VI_VSRA    => {
                          let shift_amount = get_shift_amount(zero_extend('m, simm), SEW);
                          let v_double : bits('m * 2) = sign_extend(vs2_val[i]);
                          slice(v_double >> shift_amount, 0, SEW)
                        },
          VI_VSSRL   => {
                          let shift_amount = get_shift_amount(zero_extend('m, simm), SEW);
                          let rounding_incr = get_fixed_rounding_incr(vs2_val[i], shift_amount);
                          (vs2_val[i] >> shift_amount) + zero_extend('m, rounding_incr)
                        },
          VI_VSSRA   => {
                          let shift_amount = get_shift_amount(zero_extend('m, simm), SEW);
                          let rounding_incr = get_fixed_rounding_incr(vs2_val[i], shift_amount);
                          let v_double : bits('m * 2) = sign_extend(vs2_val[i]);
                          slice(v_double >> shift_amount, 0, SEW) + zero_extend('m, rounding_incr)
                        }
        }
      }
    };

    write_vreg(num_elem, SEW, LMUL_pow, vd, result);
    vstart = zeros();
    RETIRE_SUCCESS
  }
