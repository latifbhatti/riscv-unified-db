
# function elements_to_concat_bits {
#     template
#         U32 sew,
#         U32 elements_count
#     returns
#         Bits<sew * elements_count>
#     arguments
#         Bits<sew> elements[elements_count]
#     description {
#         Concatenates all elements into a single bitvector of size.
#     }
#     body {
#         Bits<sew * elements_count> result = 0;
#         for (U32 i = 0; i < elements_count; i++) {
#             result = {(result << sew) , elements[i]};
#         }
#         return result;
#     }
# }

# U32 element1 =  get_virtual_vector_element<32>(0, 0);
# U32 register_number = 1;
# U32 element_number = 1;
# Bits<32> vd_elements12[1];
# U32 vd_elements1 =
# perform_vector_operation(
# get_virtual_vector_element<SEW>(register_number,element_number) + get_virtual_vector_element<SEW>(register_number,element_number),   #vs1+vs2
# get_virtual_vector_element<SEW>(register_number,element_number),           #vd for previous data()
# v[0][vstart],    #masking bit from vs0
# 0
# );
# vd_elements12[2] = vd_elements1 ;


# function get_virtual_vector_element {
#     template
#         U32 ELEMENT_SIZE
#     returns
#         Bits<ELEMENT_SIZE>
#     arguments
#         Bits<5> register_number,
#         U32 element_number
#     description {
#         get vector element
#     }
#     body {
#         return get_vector_element<ELEMENT_SIZE>(register_number, element_number);
#     }
# }
